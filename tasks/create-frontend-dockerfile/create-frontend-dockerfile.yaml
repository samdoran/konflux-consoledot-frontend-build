---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-frontend-dockerfile
spec:
  description: >-
    Tekton task to create a dockerfile for the frontend builds
  volumes:
    - name: workdir
      emptyDir: {}
  params:
    - default: "source"
      description: directory in the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - name: path-context
      description: path context directory inside the repo
      type: string
    - name: component
      description: name of app-sre application folder this component lives in
      type: string
    - name: image
      description: |
        image should match the quay repo set by app.yaml in app-interface
      type: string
    - name: node-build-version
      description: node version to build the app
      type: string
      default: 16
    - name: quay-expire-time
      description: time for the image to expire in Quay. Default is 3 days
      type: string
      default: 3d
    - name: npm-build-script
      type: string
      description: npm script to run at build time
      default: build
    - name: yarn-build-script
      type: string
      description: yarn script to run at build time
      default: build:prod
    - name: route-path
      type: string
      description: path for the app to be stored
      default: ""
    - name: beta-route-path
      type: string
      description: path for the beta app to be stored
      default: ""
    - name: preview-route-path
      type: string
      description: path for the preview app to be stored
      default: ""
    - name: ci-root
      type: string
      description: root of the ci.sh script
      default: ""
    - name: server-name
      type: string
      description: name of the server. If empty, same as the app name
      default: ""
    - name: dist-folder
      type: string
      description: directory where the app.info.json will be written
      default: ""
    - name: source_artifact
      type: string

  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir

  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
      args:
        - use
        - $(params.source_artifact)=/var/workdir/source

    - name: create-dockerfile
      computeResources:
        requests:
          memory: 2Gi
        limits:
          memory: 5Gi
      image: quay.io/cloudservices/frontend-build-container:latest
      script: |
        #!/usr/bin/env sh
        set -xe

        source_path=/var/workdir/$(params.subdirectory)/$(params.path-context)

        cp -r  $source_path/. /workspace
        cd /container_workspace
        bash universal_build.sh

        echo "Generated Dockerfile"
        cat Dockerfile

        echo "Generated addyfile"
        cat Caddyfile

        cp Dockerfile $source_path
        cp Caddyfile $source_path
        cp -r dist/ $source_path
      env:
        - name: COMPONENT
          value: $(params.component)
        - name: IMAGE
          value: $(params.image)
        - name: NODE_BUILD_VERSION
          value: $(params.node-build-version)
        - name: QUAY_EXPIRE_TIME
          value: $(params.quay-expire-time)
        - name: NPM_BUILD_SCRIPT
          value: $(params.npm-build-script)
        - name: YARN_BUILD_SCRIPT
          value: $(params.yarn-build-script)
        - name: ROUTE_PATH
          value: $(params.route-path)
        - name: BETA_ROUTE_PATH
          value: $(params.beta-route-path)
        - name: PREVIEW_ROUTE_PATH
          value: $(params.preview-route-path)
        - name: IS_PR
          value: "false"
        - name: CI_ROOT
          value: $(params.ci-root)
        - name: SERVER_NAME
          value: $(params.server-name)
        - name: DIST_FOLDER
          value: $(params.dist-folder)
